// Generated by mock-dash CLI

import { defineEndpoint } from 'mock-dash'
import { z } from 'zod'

export const userModel = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
})
export const sessionModel = z.object({
  id: z.string(),
  expiresAt: z.string(),
  token: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  ipAddress: z.string(),
  userAgent: z.string(),
  userId: z.string(),
})
export const accountModel = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string(),
  refreshToken: z.string(),
  idToken: z.string(),
  accessTokenExpiresAt: z.string(),
  refreshTokenExpiresAt: z.string(),
  scope: z.string(),
  password: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
})
export const verificationModel = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const postSignInSocial = defineEndpoint('@post/sign-in/social', {
  input: {
    json: z.object({
      callbackURL: z.string().nullable(),
      newUserCallbackURL: z.string().nullable(),
      errorCallbackURL: z.string().nullable(),
      provider: z.string(),
      disableRedirect: z.boolean().nullable(),
      idToken: z
        .object({
          token: z.string(),
          nonce: z.string().nullable(),
          accessToken: z.string().nullable(),
          refreshToken: z.string().nullable(),
          expiresAt: z.number().nullable(),
        })
        .nullable(),
      scopes: z.array(z.unknown()).nullable(),
      requestSignUp: z.boolean().nullable(),
      loginHint: z.string().nullable(),
    }),
  },
  response: z.object({ redirect: z.boolean(), token: z.string() }),
})

export const getGetSession = defineEndpoint('@get/get-session', {
  response: z.object({ session: sessionModel, user: userModel }),
})

export const postSignOut = defineEndpoint('@post/sign-out', {
  input: { json: z.object({}) },
  response: z.object({ success: z.boolean() }),
})

export const postSignUpEmail = defineEndpoint('@post/sign-up/email', {
  input: {
    json: z.object({
      name: z.string(),
      email: z.string(),
      password: z.string(),
      image: z.string(),
      callbackURL: z.string(),
      rememberMe: z.boolean(),
    }),
  },
  response: z.object({
    token: z.string().nullable(),
    user: z.object({
      id: z.string(),
      email: z.email(),
      name: z.string(),
      image: z.url().nullable(),
      emailVerified: z.boolean(),
      createdAt: z.iso.datetime(),
      updatedAt: z.iso.datetime(),
    }),
  }),
})

export const postSignInEmail = defineEndpoint('@post/sign-in/email', {
  input: {
    json: z.object({
      email: z.string(),
      password: z.string(),
      callbackURL: z.string().nullable(),
      rememberMe: z.string().nullable(),
    }),
  },
  response: z.object({
    redirect: z.boolean(),
    token: z.string(),
    url: z.object({}).nullable(),
    user: z.object({
      id: z.string(),
      email: z.string(),
      name: z.string().nullable(),
      image: z.string().nullable(),
      emailVerified: z.boolean(),
      createdAt: z.iso.datetime(),
      updatedAt: z.iso.datetime(),
    }),
  }),
})

export const postForgetPassword = defineEndpoint('@post/forget-password', {
  input: {
    json: z.object({ email: z.string(), redirectTo: z.string().nullable() }),
  },
  response: z.object({ status: z.boolean(), message: z.string() }),
})

export const postResetPassword = defineEndpoint('@post/reset-password', {
  input: {
    json: z.object({ newPassword: z.string(), token: z.string().nullable() }),
  },
  response: z.object({ status: z.boolean() }),
})

export const getVerifyEmail = defineEndpoint('@get/verify-email', {
  input: { query: { token: z.string(), callbackURL: z.string().optional() } },
  response: z.object({
    user: z.object({
      id: z.string(),
      email: z.string(),
      name: z.string(),
      image: z.string(),
      emailVerified: z.boolean(),
      createdAt: z.string(),
      updatedAt: z.string(),
    }),
    status: z.boolean(),
  }),
})

export const postSendVerificationEmail = defineEndpoint(
  '@post/send-verification-email',
  {
    input: {
      json: z.object({ email: z.string(), callbackURL: z.string().nullable() }),
    },
    response: z.object({ status: z.boolean() }),
  },
)

export const postChangeEmail = defineEndpoint('@post/change-email', {
  input: {
    json: z.object({
      newEmail: z.string(),
      callbackURL: z.string().nullable(),
    }),
  },
  response: z.object({ status: z.boolean(), message: z.string().nullable() }),
})

export const postChangePassword = defineEndpoint('@post/change-password', {
  input: {
    json: z.object({
      newPassword: z.string(),
      currentPassword: z.string(),
      revokeOtherSessions: z.boolean().nullable(),
    }),
  },
  response: z.object({
    token: z.string().nullable(),
    user: z.object({
      id: z.string(),
      email: z.email(),
      name: z.string(),
      image: z.url().nullable(),
      emailVerified: z.boolean(),
      createdAt: z.iso.datetime(),
      updatedAt: z.iso.datetime(),
    }),
  }),
})

export const postUpdateUser = defineEndpoint('@post/update-user', {
  input: { json: z.object({ name: z.string(), image: z.string() }) },
  response: z.object({ status: z.boolean() }),
})

export const postDeleteUser = defineEndpoint('@post/delete-user', {
  input: {
    json: z.object({
      callbackURL: z.string().nullable(),
      password: z.string().nullable(),
      token: z.string().nullable(),
    }),
  },
  response: z.object({ success: z.boolean(), message: z.string() }),
})

export const getResetPasswordToken = defineEndpoint(
  '@get/reset-password/:token',
  {
    input: { query: { callbackURL: z.string().optional() } },
    response: z.object({ token: z.string() }),
  },
)

export const postRequestPasswordReset = defineEndpoint(
  '@post/request-password-reset',
  {
    input: {
      json: z.object({ email: z.string(), redirectTo: z.string().nullable() }),
    },
    response: z.object({ status: z.boolean(), message: z.string() }),
  },
)

export const getListSessions = defineEndpoint('@get/list-sessions', {
  response: z.array(sessionModel),
})

export const postRevokeSession = defineEndpoint('@post/revoke-session', {
  input: { json: z.object({ token: z.string() }) },
  response: z.object({ status: z.boolean() }),
})

export const postRevokeSessions = defineEndpoint('@post/revoke-sessions', {
  input: { json: z.object({}) },
  response: z.object({ status: z.boolean() }),
})

export const postRevokeOtherSessions = defineEndpoint(
  '@post/revoke-other-sessions',
  {
    input: { json: z.object({}) },
    response: z.object({ status: z.boolean() }),
  },
)

export const postLinkSocial = defineEndpoint('@post/link-social', {
  input: {
    json: z.object({
      callbackURL: z.string().nullable(),
      provider: z.string(),
      idToken: z
        .object({
          token: z.string(),
          nonce: z.string().nullable(),
          accessToken: z.string().nullable(),
          refreshToken: z.string().nullable(),
          scopes: z.array(z.unknown()).nullable(),
        })
        .nullable(),
      requestSignUp: z.boolean().nullable(),
      scopes: z.array(z.unknown()).nullable(),
      errorCallbackURL: z.string().nullable(),
      disableRedirect: z.boolean().nullable(),
    }),
  },
  response: z.object({
    url: z.string(),
    redirect: z.boolean(),
    status: z.boolean(),
  }),
})

export const getListAccounts = defineEndpoint('@get/list-accounts', {
  response: z.array(
    z.object({
      id: z.string(),
      providerId: z.string(),
      createdAt: z.iso.datetime(),
      updatedAt: z.iso.datetime(),
      accountId: z.string(),
      scopes: z.array(z.string()),
    }),
  ),
})

export const getDeleteUserCallback = defineEndpoint(
  '@get/delete-user/callback',
  {
    input: {
      query: {
        token: z.string().optional(),
        callbackURL: z.string().nullable().optional(),
      },
    },
    response: z.object({ success: z.boolean(), message: z.string() }),
  },
)

export const postUnlinkAccount = defineEndpoint('@post/unlink-account', {
  input: {
    json: z.object({
      providerId: z.string(),
      accountId: z.string().nullable(),
    }),
  },
  response: z.object({ status: z.boolean() }),
})

export const postRefreshToken = defineEndpoint('@post/refresh-token', {
  input: {
    json: z.object({
      providerId: z.string(),
      accountId: z.string().nullable(),
      userId: z.string().nullable(),
    }),
  },
  response: z.object({
    tokenType: z.string(),
    idToken: z.string(),
    accessToken: z.string(),
    refreshToken: z.string(),
    accessTokenExpiresAt: z.iso.datetime(),
    refreshTokenExpiresAt: z.iso.datetime(),
  }),
})

export const postGetAccessToken = defineEndpoint('@post/get-access-token', {
  input: {
    json: z.object({
      providerId: z.string(),
      accountId: z.string().nullable(),
      userId: z.string().nullable(),
    }),
  },
  response: z.object({
    tokenType: z.string(),
    idToken: z.string(),
    accessToken: z.string(),
    refreshToken: z.string(),
    accessTokenExpiresAt: z.iso.datetime(),
    refreshTokenExpiresAt: z.iso.datetime(),
  }),
})

export const postAccountInfo = defineEndpoint('@post/account-info', {
  input: { json: z.object({ accountId: z.string() }) },
  response: z.object({
    user: z.object({
      id: z.string(),
      name: z.string(),
      email: z.string(),
      image: z.string(),
      emailVerified: z.boolean(),
    }),
    data: z.object({}),
  }),
})

export const getOk = defineEndpoint('@get/ok', {
  response: z.object({ ok: z.boolean() }),
})

export const getError = defineEndpoint('@get/error', {
  response: z.undefined(),
})
